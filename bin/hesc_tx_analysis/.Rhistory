legendLabSize = 10,
legendIconSize = 4.0,
drawConnectors = TRUE,
widthConnectors = 1.0,
colConnectors = 'black')
dev.off()
pdf(paste0(fileVP, '.pdf'), width = 10, height = 10)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
selectLab = gene_highlight,
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-4,
FCcutoff = 1.0,
pointSize = 3.0,
labSize = 5.0,
labCol = 'black',
labFace = 'bold',
boxedLabels = TRUE,
colAlpha = 4/5,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 4.0,
drawConnectors = TRUE,
widthConnectors = 1.0,
colConnectors = 'black')
dev.off()
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(SingleCellExperiment))
suppressMessages(require(DESeq2))
# suppressMessages(require(Matrix))
# suppressMessages(require(gridExtra))
suppressMessages(require(ggplot2))
# suppressMessages(require(pheatmap))
# suppressMessages(library(dplyr))
# #BiocManager::install("scuttle")
# suppressMessages(library(SummarizedExperiment))
# suppressMessages(library(SingleR))
# suppressMessages(library(patchwork))
# suppressMessages(library(ggrepel))
# suppressMessages(library(scuttle))
library(pheatmap)
# name of the folder with the matrices themselves
# add the path to single cell data
pseudobulk.folder <- "../../results/Batch_corrections/seurat/TX/pseudobulk/"
# find files in the folder
mat.file.ref <- grep("counts_TX", list.files(pseudobulk.folder), value=TRUE)
cell.attr.file.ref <- grep("annotation_TX", list.files(pseudobulk.folder), value=TRUE)
# load count and attribute files
mtx <- as.matrix(t(as.data.frame(read.delim(paste0(pseudobulk.folder, mat.file.ref), header=TRUE, row.names=1, check.names=FALSE, sep = '\t'))))
attr <- read.delim(paste0(pseudobulk.folder, cell.attr.file.ref), header=TRUE, row.names=1, check.names=FALSE, sep = '\t')
ddsFull <- DESeqDataSetFromMatrix(countData = round(mtx, 0),
colData = attr,
design = ~ region)
ddsFull
ddsFull$region <- relevel(ddsFull$region, ref='TX')
as.data.frame( colData( ddsFull )[ ,c("slide","region") ] )
# ddsCollapsed <- collapseReplicates(ddsFull,
# groupby = ddsFull$region,
# run = ddsFull$pseubobuk_cluster )
# head( as.data.frame( colData(ddsCollapsed)[ ,c("runsCollapsed") ] ), 12 )
dds <- DESeq(ddsFull)
res <- results( dds, contrast = c('region', 'TX', 'host')  )
res['SLC6A3',]
res.0.01 = results(dds, alpha=0.001, contrast = c('region', 'TX', 'host') )
summary(res.0.01)
res.df = as.data.frame(res.0.01)
vld <- vst(dds)
res.0.01.f = na.omit(res.0.01)
res.0.01.f = res.0.01.f[res.0.01.f$padj<0.001,]
resSort <- res.0.01.f[order(res.0.01.f$stat, decreasing=TRUE),]
topgenes <- head(rownames(resSort),100)
mat <- assay(vld)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("region", 'slide')])
while (!is.null(dev.list()))  dev.off()
pdf(paste0(pseudobulk.folder, 'DEG_DESeq2_hostvsTX_row_scaled.pdf'), width = 5, height = 15)
pheatmap(mat, annotation_col=df,
scale = 'row',
clustering_method = 'ward.D2',
breaks = seq(0,5, 0.05),
show_colnames = FALSE,
cluster_rows = FALSE,
show_rownames=TRUE)
dev.off()
pdf(paste0(pseudobulk.folder, 'DEG_DESeq2_hostvsTX_unscaled.pdf'), width = 5, height = 15)
pheatmap(mat, annotation_col=df,
scale = 'none',
clustering_method = 'ward.D2',
breaks = seq(0,5, 0.05),
show_colnames = FALSE,
cluster_rows = FALSE,
show_rownames=TRUE)
dev.off()
library(EnhancedVolcano)
# res <- lfcShrink(dds, contrast = c('region', 'TX', 'STR'), res=res, type = 'normal')
TX_genes = c('ALDH1A1','TH','SLC18A2', 'SLC6A3','PBX1','COL1A1','COL1A2','GFAP','MALAT1')
gene_highlight =  c(TX_genes, head(rownames(resSort),10))
fileVP = paste0(pseudobulk.folder, 'VP_DEG_DESeq2_hostvsTX')
png(paste0(fileVP, '.png'), units = 'cm', width = 30, height = 30, res=100)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
selectLab = gene_highlight,
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-4,
FCcutoff = 1.0,
pointSize = 3.0,
labSize = 5.0,
labCol = 'black',
labFace = 'bold',
boxedLabels = TRUE,
colAlpha = 4/5,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 4.0,
drawConnectors = TRUE,
widthConnectors = 1.0,
colConnectors = 'black')
dev.off()
pdf(paste0(fileVP, '.pdf'), width = 10, height = 10)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'padj',
selectLab = gene_highlight,
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-4,
FCcutoff = 1.0,
pointSize = 3.0,
labSize = 5.0,
labCol = 'black',
labFace = 'bold',
boxedLabels = TRUE,
colAlpha = 4/5,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 4.0,
drawConnectors = TRUE,
widthConnectors = 1.0,
colConnectors = 'black')
dev.off()
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
# remotes::install_github("mojaveazure/seurat-disk")
library(Seurat)
# library(SeuratDisk)
library(ggplot2)
library(patchwork)
options(future.globals.maxSize= 54428800000)
#dataset is the name of the folder and will be added as the output directory and as a signifier to the output graphs and files
resolution = 1
dataset <- "TX-excluded"
st.file <- "/media/Dropbox/MNM projects/Spatial transcriptomics project/Data analysis/Complete_ST_pipeline/data/ST_files/TX_excluded.txt"
stdata.folder <- "/media/Dropbox/MNM projects/Spatial transcriptomics project/Data analysis/Complete_ST_pipeline/data/st_data_pre_processed/stdata_tsv/"
output.dir <- paste0("/media/Dropbox/MNM projects/Spatial transcriptomics project/Data analysis/Complete_ST_pipeline/results/Batch_corrections/seurat/", dataset, "/")
timestamp <- strsplit(as.character(Sys.time()), ' ')[[1]][1]
# Read in the sample names to be processed
samples.table <- read.table(st.file, sep="\n", header=FALSE)
samples <- as.character(samples.table$V1)
print(samples)
# Create a list with Seurat objects
ST.list <- list()
ST.feature.list <- list()
for (i in samples){
print(i)
table_st <- read.table(file=paste0(stdata.folder, i,"_stdata.tsv"), sep="\t", header=TRUE)
rownames(table_st) <- table_st$feature
table_st$feature <- NULL
table_st <- as.data.frame(t(table_st))
ST.feature.list[[i]] <- colnames(table_st)
colnames(table_st) <- paste0(i, '-', colnames(table_st))
ST.list[[i]] <-  CreateSeuratObject(counts=table_st, project=as.character(i))
ST.list[[i]]@meta.data$well <- as.character(i)
ST.list[[i]]@meta.data$feature <- ST.feature.list[[i]]
print(ncol(table_st))
}
# Normalize the samples with SCT transform
ST.list <- ST.list[samples]
for (i in 1:length(ST.list)) {
ST.list[[i]] <- SCTransform(ST.list[[i]], verbose = FALSE)
}
#Select features for downstream integration
ST.features <- SelectIntegrationFeatures(object.list = ST.list, nfeatures = 3000)
ST.list <- PrepSCTIntegration(object.list = ST.list, anchor.features = ST.features,
verbose = FALSE)
# Find integration anchors and integrate samples (takes a long time)
ST.anchors <- FindIntegrationAnchors(object.list = ST.list, normalization.method = "SCT",
anchor.features = ST.features, verbose = FALSE)
ST.integrated <- IntegrateData(anchorset = ST.anchors, normalization.method = "SCT",
verbose = FALSE)
#Dimenstionally reduce and visualize
ST.integrated <- RunPCA(ST.integrated, verbose = FALSE)
ST.integrated <- RunUMAP(ST.integrated, dims = 1:11)
DimPlot(ST.integrated, group.by = "orig.ident")
plots <- DimPlot(ST.integrated, group.by = "orig.ident")
plots & theme(legend.position = "top") & guides(color = guide_legend(nrow = 3, byrow = TRUE,
override.aes = list(size = 3)))
DimPlot(ST.integrated, group.by = "orig.ident", split.by = "orig.ident", ncol = 3)
# DefaultAssay(ST.integrated) <- "RNA"
#Find variable features and plot
ST.integrated <- FindVariableFeatures(ST.integrated, selection.method = "vst", nfeatures = 3000)
top10 <- head(VariableFeatures(ST.integrated), 10)
plot1 <- VariableFeaturePlot(ST.integrated)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
ST.integrated <- RunPCA(ST.integrated, features = VariableFeatures(object = ST.integrated))
ElbowPlot(ST.integrated, ndims = 51)
pca_number <- ST.integrated@reductions[["pca"]]@stdev[1:50] - ST.integrated@reductions[["pca"]]@stdev[2:51]
pca_number <- max(which(pca_number > 0.1))
#Jackstraw - more computationally expensive
# ST.integrated <- JackStraw(ST.integrated, num.replicate = 100)
# ST.integrated <- ScoreJackStraw(ST.integrated, dims = 1:12)
# JackStrawPlot(ST.integrated, dims = 40)
ST.integrated <- FindNeighbors(ST.integrated, dims = 1:pca_number, k.param = 20, prune.SNN = 1/15, n.trees = 100)
# ST.integrated <- FindNeighbors(ST.integrated, dims = 1:10)
ST.integrated <- FindClusters(ST.integrated, algorithm = 4, resolution = 1)
DimPlot(ST.integrated, reduction = "umap")
DimPlot(ST.integrated, reduction = "umap", split.by = 'seurat_clusters', ncol=3)
#ST.integrated <- RunUMAP(ST.integrated, dims = 1:12)
### If you want to explore different Leiden resolutions, use the following line.
# It will create folders with the datasets and resolutions as a name and put the results in the folder
# for (resolution in c(0.6, 0.8, 1.0, 1.2, 1.4, 1.6)){
# For our purposes, resolution 1 gives good results without excessive fragmentatioN
print(output.dir)
dir.create(paste0(output.dir, 'plt/'), showWarnings = FALSE, recursive = TRUE)
#ST.integrated <- FindClusters(ST.integrated, resolution = resolution)
ST.integrated <- RunUMAP(ST.integrated, dims = 1:pca_number)
jpeg(file=paste0(output.dir, "plt/UMAP_well_seurat_", dataset, ".jpg"))
DimPlot(ST.integrated, group.by = "orig.ident")
dev.off()
DimPlot(ST.integrated, reduction = "umap")
jpeg(file=paste0(output.dir, "plt/UMAP_clusters_seurat_", dataset, ".jpg"))
DimPlot(ST.integrated, reduction = "umap")
dev.off()
jpeg(file=paste0(output.dir, "plt/UMAP_genes_seurat_", dataset, ".jpg"))
# Visualize the expression on genes of interest
FeaturePlot(ST.integrated, features = c("TH", "PENK", "PDYN", "SLC6A3", "MBP", "CCK"))
# Export the cluster data into a csv file and save the Seurat object
dev.off()
jpeg(file=paste0(output.dir, "plt/UMAP_by-well_seurat_", dataset, ".jpg"))
# Visualize the expression on genes of interest
DimPlot(ST.integrated, group.by = "well")
# Export the cluster data into a csv file and save the Seurat object
dev.off()
UMAP_embedding <- as.data.frame(Embeddings(ST.integrated@reductions$umap))
df <- data.frame("feature"=ST.integrated@meta.data$feature,
"sample"=ST.integrated@meta.data$well,
"cluster"=as.numeric(ST.integrated@meta.data[["seurat_clusters"]]),
"umap1" = UMAP_embedding$UMAP_1,
"umap2" = UMAP_embedding$UMAP_2)
file.name <- paste0(output.dir, dataset, "_seurat_clusters_combined.tsv")
write.table(df, file = file.name, row.names=FALSE, sep="\t")
knitr::opts_chunk$set(echo = TRUE)
# write out the resulting dataframe
pred.file <- '/media/Dropbox/MNM projects/Spatial transcriptomics project/Data analysis/Complete_ST_pipeline/results/SingleR/pred.wilcox.lin.1000.astmerged.R'
load(pred.file)
View(pred.wilcox.lin.1000.astmerged)
load('../../data/hesc_tx/hESC_TX_seurat.Rdata')
sc.ref.name <- "L5_CTX_M_STR_CNS_description_selection_1000_astmerged_Tax4"
UMAP_embedding <- as.data.frame(Embeddings(new@reductions$umap))
hESC.TX.df <- data.frame("CellID" = new@assays$RNA@counts@Dimnames[2],
"Celltype_SingleR"=new@meta.data$SingleR,
'cluster'= new@meta.data$seurat_clusters,
"umap1" = UMAP_embedding$UMAP_1,
"umap2" = UMAP_embedding$UMAP_2)
View(new)
table(new$CelltypeMBA)
sc.ref.path <- "/media/Dropbox/MNM projects/Spatial transcriptomics project/Data analysis/Complete_ST_pipeline/data/sc_data/mouse_sc/L5_201022/"
sc.ref.name <- "L5_CTX_M_STR_CNS_description_selection_1000_astmerged_Tax4"
sc.ref.folder <- paste0(sc.ref.path, sc.ref.name, '_decomposed_reference/')
# find files in the folder
mat.file.ref <- grep("cnt", list.files(sc.ref.folder), value=TRUE)
cell.attr.file.ref <- grep("mta", list.files(sc.ref.folder), value=TRUE)
# load count and attribute files
cell.attr.ref <- read.delim(paste0(sc.ref.folder, cell.attr.file.ref), header=TRUE, row.names=1, check.names=FALSE, sep = ',')
mat.ref <- read.delim(paste0(sc.ref.folder, mat.file.ref), header=TRUE, row.names=1, check.names=FALSE, sep = ',')
sce.ref <- SingleCellExperiment(assays = list(counts = t(mat.ref)), colData=cell.attr.ref)
suppressMessages(library(SingleCellExperiment))
suppressMessages(require(Seurat))
suppressMessages(require(Matrix))
suppressMessages(require(gridExtra))
suppressMessages(require(ggplot2))
suppressMessages(require(pheatmap))
suppressMessages(library(dplyr))
#BiocManager::install("scuttle")
suppressMessages(library(SummarizedExperiment))
suppressMessages(library(SingleR))
suppressMessages(library(patchwork))
suppressMessages(library(ggrepel))
suppressMessages(library(scuttle))
sce.ref <- SingleCellExperiment(assays = list(counts = t(mat.ref)), colData=cell.attr.ref)
sce.ref <- scuttle::logNormCounts(sce.ref)
sce.ref
save(sc.ref.path, file=paste0(sc.ref.path, sc.ref.name, '_SingleCellExperiment.R'))
#mat.t <- t(mat.t)
expr.TX <- new@assays$RNA@data
sce.TX <- SingleCellExperiment(assays = list(counts = expr.TX))
sce.TX <- scuttle::logNormCounts(sce.TX)
sce.TX
# remove dubious cell types from the dataset
#sce.ref.red <- sce.ref[, ! sce.ref$Celltype_assigned %in% c("Ependymal cells, midbrain (decoy)", "Glutamanergic projection neurons of the raphe nucleus (decoy)")]
table(sce.ref$Celltype_assigned)
# run SingleR instance
pred.wilcox.lin.1000.astmerged <- SingleR(test=sce.TX, ref=sce.ref, labels=sce.ref$Celltype_assigned, de.method="wilcox")
# show the results
sort(table(pred.wilcox.lin.1000.astmerged$labels))
new@meta.data$SingleR <- pred.wilcox.lin.1000.astmerged$labels
# write out the resulting dataframe
pred.file <- '/media/Dropbox/MNM projects/Spatial transcriptomics project/Data analysis/Complete_ST_pipeline/results/SingleR/pred.wilcox.lin.1000.astmerged.R'
save(pred.wilcox.lin.1000.astmerged, file=pred.file)
load(pred.file)
UMAP_embedding <- as.data.frame(Embeddings(new@reductions$umap))
hESC.TX.df <- data.frame("CellID" = new@assays$RNA@counts@Dimnames[2],
"Celltype_SingleR"=new@meta.data$SingleR,
'cluster'= new@meta.data$seurat_clusters,
"umap1" = UMAP_embedding$UMAP_1,
"umap2" = UMAP_embedding$UMAP_2)
write.table(hESC.TX.df, file=paste0('../../results/SingleR/hESC_TX_sc_SingleR_analysis', sc.ref.name, '.tsv'), sep='\t', quote=FALSE)
gc()
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(SingleCellExperiment))
suppressMessages(require(Seurat))
suppressMessages(require(Matrix))
suppressMessages(require(gridExtra))
suppressMessages(require(ggplot2))
suppressMessages(require(pheatmap))
suppressMessages(library(dplyr))
#BiocManager::install("scuttle")
suppressMessages(library(SummarizedExperiment))
suppressMessages(library(SingleR))
suppressMessages(library(patchwork))
suppressMessages(library(ggrepel))
suppressMessages(library(scuttle))
load('../../data/hesc_tx/hESC_TX_seurat.Rdata')
# name of the folder with the matrices themselves
# add the path to single cell data
sc.ref.path <- "/media/Dropbox/MNM projects/Spatial transcriptomics project/Data analysis/Complete_ST_pipeline/data/sc_data/mouse_sc/L5_201022/"
sc.ref.name <- "L5_CTX_M_STR_CNS_description_selection_1000_astmerged_Tax4"
sc.ref.folder <- paste0(sc.ref.path, sc.ref.name, '_decomposed_reference/')
# find files in the folder
mat.file.ref <- grep("cnt", list.files(sc.ref.folder), value=TRUE)
cell.attr.file.ref <- grep("mta", list.files(sc.ref.folder), value=TRUE)
# load count and attribute files
cell.attr.ref <- read.delim(paste0(sc.ref.folder, cell.attr.file.ref), header=TRUE, row.names=1, check.names=FALSE, sep = ',')
mat.ref <- read.delim(paste0(sc.ref.folder, mat.file.ref), header=TRUE, row.names=1, check.names=FALSE, sep = ',')
sce.ref <- SingleCellExperiment(assays = list(counts = t(mat.ref)), colData=cell.attr.ref)
sce.ref <- scuttle::logNormCounts(sce.ref)
sce.ref
save(sc.ref.path, file=paste0(sc.ref.path, sc.ref.name, '_SingleCellExperiment.R'))
#mat.t <- t(mat.t)
expr.TX <- new@assays$RNA@data
sce.TX <- SingleCellExperiment(assays = list(counts = expr.TX))
sce.TX <- scuttle::logNormCounts(sce.TX)
sce.TX
#save(sce.TX, file="SingleR_transplant_single_cell_experiment.R")
# remove dubious cell types from the dataset
#sce.ref.red <- sce.ref[, ! sce.ref$Celltype_assigned %in% c("Ependymal cells, midbrain (decoy)", "Glutamanergic projection neurons of the raphe nucleus (decoy)")]
table(sce.ref$Celltype_assigned)
# run SingleR instance
pred.wilcox.lin.1000.astmerged <- SingleR(test=sce.TX, ref=sce.ref, labels=sce.ref$Celltype_assigned, de.method="classic")
# show the results
sort(table(pred.wilcox.lin.1000.astmerged$labels))
new@meta.data$SingleR <- pred.wilcox.lin.1000.astmerged$labels
# write out the resulting dataframe
pred.file <- '/media/Dropbox/MNM projects/Spatial transcriptomics project/Data analysis/Complete_ST_pipeline/results/SingleR/pred.wilcox.lin.1000.astmerged.R'
save(pred.wilcox.lin.1000.astmerged, file=pred.file)
load(pred.file)
UMAP_embedding <- as.data.frame(Embeddings(new@reductions$umap))
hESC.TX.df <- data.frame("CellID" = new@assays$RNA@counts@Dimnames[2],
"Celltype_SingleR"=new@meta.data$SingleR,
'cluster'= new@meta.data$seurat_clusters,
"umap1" = UMAP_embedding$UMAP_1,
"umap2" = UMAP_embedding$UMAP_2)
write.table(hESC.TX.df, file=paste0('../../results/SingleR/hESC_TX_sc_SingleR_analysis', sc.ref.name, '.tsv'), sep='\t', quote=FALSE)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(SingleCellExperiment))
suppressMessages(require(Seurat))
suppressMessages(require(Matrix))
suppressMessages(require(gridExtra))
suppressMessages(require(ggplot2))
suppressMessages(require(pheatmap))
suppressMessages(library(dplyr))
#BiocManager::install("scuttle")
suppressMessages(library(SummarizedExperiment))
suppressMessages(library(SingleR))
suppressMessages(library(patchwork))
suppressMessages(library(ggrepel))
suppressMessages(library(scuttle))
load('../../data/hesc_tx/hESC_TX_seurat.Rdata')
# name of the folder with the matrices themselves
# add the path to single cell data
sc.ref.path <- "/media/Dropbox/MNM projects/Spatial transcriptomics project/Data analysis/Complete_ST_pipeline/data/sc_data/mouse_sc/L5_141122/"
sc.ref.name <- "L5_CTX_M_STR_CNS_description_selection_1000_astmerged_Tax4"
sc.ref.folder <- paste0(sc.ref.path, sc.ref.name, '_decomposed_reference/')
# find files in the folder
mat.file.ref <- grep("cnt", list.files(sc.ref.folder), value=TRUE)
cell.attr.file.ref <- grep("mta", list.files(sc.ref.folder), value=TRUE)
# load count and attribute files
cell.attr.ref <- read.delim(paste0(sc.ref.folder, cell.attr.file.ref), header=TRUE, row.names=1, check.names=FALSE, sep = ',')
mat.ref <- read.delim(paste0(sc.ref.folder, mat.file.ref), header=TRUE, row.names=1, check.names=FALSE, sep = ',')
sce.ref <- SingleCellExperiment(assays = list(counts = t(mat.ref)), colData=cell.attr.ref)
sce.ref <- scuttle::logNormCounts(sce.ref)
sce.ref
save(sc.ref.path, file=paste0(sc.ref.path, sc.ref.name, '_SingleCellExperiment.R'))
#mat.t <- t(mat.t)
expr.TX <- new@assays$RNA@data
sce.TX <- SingleCellExperiment(assays = list(counts = expr.TX))
sce.TX <- scuttle::logNormCounts(sce.TX)
sce.TX
#save(sce.TX, file="SingleR_transplant_single_cell_experiment.R")
# remove dubious cell types from the dataset
#sce.ref.red <- sce.ref[, ! sce.ref$Celltype_assigned %in% c("Ependymal cells, midbrain (decoy)", "Glutamanergic projection neurons of the raphe nucleus (decoy)")]
table(sce.ref$Celltype_assigned)
# run SingleR instance
pred.wilcox.lin.1000.astmerged <- SingleR(test=sce.TX, ref=sce.ref, labels=sce.ref$Celltype_assigned, de.method="classic")
# show the results
sort(table(pred.wilcox.lin.1000.astmerged$labels))
new@meta.data$SingleR <- pred.wilcox.lin.1000.astmerged$labels
# write out the resulting dataframe
pred.file <- '/media/Dropbox/MNM projects/Spatial transcriptomics project/Data analysis/Complete_ST_pipeline/results/SingleR/pred.wilcox.lin.1000.astmerged.R'
save(pred.wilcox.lin.1000.astmerged, file=pred.file)
load(pred.file)
UMAP_embedding <- as.data.frame(Embeddings(new@reductions$umap))
hESC.TX.df <- data.frame("CellID" = new@assays$RNA@counts@Dimnames[2],
"Celltype_SingleR"=new@meta.data$SingleR,
'cluster'= new@meta.data$seurat_clusters,
"umap1" = UMAP_embedding$UMAP_1,
"umap2" = UMAP_embedding$UMAP_2)
write.table(hESC.TX.df, file=paste0('../../results/SingleR/hESC_TX_sc_SingleR_analysis', sc.ref.name, '.tsv'), sep='\t', quote=FALSE)
library(Seurat)
?CreateSeuratObject
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(SingleCellExperiment))
suppressMessages(require(Seurat))
suppressMessages(require(Matrix))
suppressMessages(require(gridExtra))
suppressMessages(require(ggplot2))
suppressMessages(require(pheatmap))
suppressMessages(library(dplyr))
#BiocManager::install("scuttle")
suppressMessages(library(SummarizedExperiment))
suppressMessages(library(SingleR))
suppressMessages(library(patchwork))
suppressMessages(library(ggrepel))
suppressMessages(library(scuttle))
# write out the resulting dataframe
pred.file <- '/media/Dropbox/MNM projects/Spatial transcriptomics project/Data analysis/Complete_ST_pipeline/results/SingleR/pred.wilcox.lin.1000.astmerged_wilcox_201022.R'
load(pred.file)
plotScoreHeatmap(pred.wilcox.lin.1000.astmerged)
plotScoreHeatmap(pred.wilcox.lin.1000.astmerged)
plotScoreHeatmap(pred.wilcox.lin.1000.astmerged, show.pruned = TRUE)
plotScoreHeatmap(pred.wilcox.lin.1000.astmerged, show.pruned = TRUE)
pdf(paste0('../../results/SingleR/pheatmap_celltypes_scoreheatmap_291122.pdf'), width = 7, height = 3)
plotScoreHeatmap(pred.wilcox.lin.1000.astmerged, show.pruned = TRUE)
dev.off()
pdf(paste0('../../results/SingleR/pheatmap_celltypes_scoreheatmap_291122.pdf'), width = 7, height = 3)
plotScoreHeatmap(pred.wilcox.lin.1000.astmerged, show.pruned = TRUE)
dev.off()
pdf(paste0('../../results/SingleR/pheatmap_celltypes_scoreheatmap_291122.pdf'), width = 30, height = 10)
plotScoreHeatmap(pred.wilcox.lin.1000.astmerged, show.pruned = TRUE)
dev.off()
pdf(paste0('../../results/SingleR/pheatmap_celltypes_scoreheatmap_291122.pdf'), width = 12, height = 5)
plotScoreHeatmap(pred.wilcox.lin.1000.astmerged, show.pruned = TRUE)
dev.off()
all.markers <- metadata(pred.wilcox.lin.1000.astmerged)$de.genes
sceG$labels <- pred.wilcox.lin.1000.astmerged$labels
all.markers <- metadata(pred.wilcox.lin.1000.astmerged)$de.genes
pred.wilcox.lin.1000.astmerged$labels <- pred.wilcox.lin.1000.astmerged$labels
plotHeatmap(pred.wilcox.lin.1000.astmerged, order_columns_by="labels",
features=unique(unlist(all.markers$beta)))
library(scater)
plotHeatmap(pred.wilcox.lin.1000.astmerged, order_columns_by="labels",
features=unique(unlist(all.markers$beta)))
load('../../data/hesc_tx/hESC_TX_seurat.Rdata')
load("../../data/hesc_tx/filtered_seurat_object.Rdata")
sce.TX = SCTransform(dataA, vars.to.regress = 'Sample')
sce.TX = as.SingleCellExperiment(sce.TX)
sce.TX
all.markers <- metadata(pred.wilcox.lin.1000.astmerged)$de.genes
sceTX$labels <- pred.wilcox.lin.1000.astmerged$labels
sce.TX$labels <- pred.wilcox.lin.1000.astmerged$labels
plotHeatmap(sce.TX, order_columns_by="labels",
features=unique(unlist(all.markers$beta)))
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(SingleCellExperiment))
suppressMessages(require(Seurat))
suppressMessages(require(Matrix))
suppressMessages(require(gridExtra))
suppressMessages(require(ggplot2))
suppressMessages(require(pheatmap))
suppressMessages(library(dplyr))
#BiocManager::install("scuttle")
suppressMessages(library(SummarizedExperiment))
suppressMessages(library(SingleR))
suppressMessages(library(patchwork))
suppressMessages(library(ggrepel))
suppressMessages(library(scuttle))
load('../../data/hesc_tx/hESC_TX_seurat.Rdata')
load('../../data/hesc_tx/filtered_seurat_object.Rdata')
sc.ref.path <- "/media/Dropbox/MNM projects/Spatial transcriptomics project/Data analysis/Complete_ST_pipeline/data/sc_data/mouse_sc/L5_201022/"
sc.ref.name <- "L5_CTX_M_STR_CNS_description_selection_1000_astmerged_Tax4"
sc.ref.folder <- paste0(sc.ref.path, sc.ref.name, '_decomposed_reference/')
# find files in the folder
mat.file.ref <- grep("cnt", list.files(sc.ref.folder), value=TRUE)
cell.attr.file.ref <- grep("mta", list.files(sc.ref.folder), value=TRUE)
# load count and attribute files
cell.attr.ref <- read.delim(paste0(sc.ref.folder, cell.attr.file.ref), header=TRUE, row.names=1, check.names=FALSE, sep = ',')
mat.ref <- read.delim(paste0(sc.ref.folder, mat.file.ref), header=TRUE, row.names=1, check.names=FALSE, sep = ',')
